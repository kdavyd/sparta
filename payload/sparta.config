#
# Resource manager configuration file
# - This file is read into the main resource script, so all entries are variables
#   and only the variables should be in upper case
#
# DO NOT edit this file manually as any changes will be lost when SPARTA performs
# an auto-update
# If you wish to alter the zpool to monitor or which service (cifs, nfs, iscsi)
# to monitor, edit the file(s) pointed to by SERVICES_TO_MONITOR and also
# ZPOOL_TO_MONITOR 
#

################################################################################
#
# Section 1: Initialisation of variables for use in the script
#

#
# This version of SPARTA
#
SPARTA_VER="0.56 BETA"

#
# Bleugh, locale stuff ... the SPARTA analysis scripts expect to find a datestamp
# of the format '+%a %b %e %H:%M:%S %Z %Y' ie:
#   %a      day of the week abbr
#   %b      month abbr
#   %e      numeric day of the month, but a leading zero is replaced by a space (eg  1..32)
#   %H      hour, 24 hour clock, leading 0's)
#   %M      minute, leading 0's
#   %S      seconds, leading 0's
#   %Z      timezone in ascii. eg: PST
#   %Y      year (4 digits)
#
# In order to ensure locale specific configuration doesn't cause a problem for the analysis
# scripts, we set LC_TIME=C to give us this expected convention, in order to prevent problems
# for the analysis tools.
# This must NOT be changed, unless the analysis tools have been coded to adapt to any locale
# specific values!
#
LC_TIME=C
export LC_TIME


#
# Where we're going to store our performance logging data, config and scripts
#
LOG_DIR=/perflogs
LOG_DATASET=syspool/perflogs
LOG_CONFIG=$LOG_DIR/etc
LOG_SCRIPTS=$LOG_DIR/scripts
SPARTA_LOG=$LOG_DIR/sparta.log

#
# Setup variables for the auto download code
#
SPARTA_ETC=/perflogs/etc                                                        # Where we store the fingerprint/hash
SPARTA_HASH=sparta.hash                                                         # Name of temporary downloaded hash file 
SPARTA_HASH_URL="https://github.com/jasonba/sparta/raw/master/sparta.hash"      # The URL for the hash file

SPARTA_URL="https://github.com/jasonba/sparta/raw/master/sparta.tar.gz"         # The URL of the SPARTA tarball
SPARTA_FILE="/tmp/sparta.tar.gz"                                                # Local copy of the tarball

SPARTA_UPDATER_URL="https://github.com/jasonba/sparta/raw/master/auto-installer.sh"   # The program that performs the update
SPARTA_UPDATER="/tmp/auto-installer.sh"                                         # Local copy of the updater script

#
# Decide whether we wish to run the auto-update code
#
UPDATE_OPT="yes"

#
# The name we give the tarball
#
TARBALL_DIR=/var/tmp
PERF_TARBALL=${TARBALL_DIR}/nexenta_perf_data-`date +%Y-%m-%d_%H:%M:%S`.tar

#
# Saved configuration data for pool name and which services to monitor
#
SERVICES_TO_MONITOR="$LOG_CONFIG/.services_to_monitor"
ZPOOL_TO_MONITOR="$LOG_CONFIG/.zpool_to_monitor"

#
# Define some required storage sizes (in bytes) for later arithmetic operations
#
MEGABYTE=1048576
GIGABYTE=1073741824

#
# How much space needs to be available to start logging data (needs to be specified in bytes)
# In case you've not had your early cup of coffee, this is currently 1GB
#
LOG_SPACE_MIN=1073741824

#
# Have a nominal "large" amount of log data threshold, at which point we can advise that
# there is a lot of data that has been collected, which also means analysis may take
# longer.
#
LOG_USAGE_WARNING="`expr $GIGABYTE \* 1`"

#
# We take the scaling factor below and multiply it by the calculated number that represents
# how much actual space we're using in the logging directory/filesystem, typically /perflogs
# If we're dealing with data that compresses very well, then this should be a little too 
# cautious
# However if the data doesn't compress well (worst case) then we'll need at least the same 
# amount of space in the TARBALL_DIR directory to compress the file before the original 
# tarball can be removed
#
# In the default configuration the scaling factor is double plus a slop overhead which should
# be sufficient, however if you *really* know this is too high, then you may consider lowering
# this value on the live installation to get a tarball, however bear in mind:
#
# 1) It will be overwritten on the next SPARTA update
# 2) It's easier to temporarily adjust the TARBALL_DIR location but (see the above)
# 3) Nature may abhor a vacuum but tidyness is next to Godliness (prune that /perflogs directory)
#
LOG_USAGE_SCALING_FACTOR=2.2


#
# When looking at the zpool that is logging the performance data, how full does this have to
# be before we stop SPARTA and discontinued logging information?  
# Units = Percentage (%)
#
PERF_ZPOOL_CAPACITY_PERC=80

#
# Nexenta specific URLs and email addresses
#
FTP_SERVER="ftp.nexenta.com"
CRM_TOOL="http://login.salesforce.com"
NEX_SUPPORT_EMAIL="support@nexenta.com"

#
# Where our binaries live
#
CAT=/usr/bin/cat
CP=/usr/bin/cp
DATE=/usr/bin/date
DIFF=/usr/bin/diff
DLADM=/usr/sbin/dladm
DU=/usr/bin/du
#
# Needs a better test but for now detect whether this is running on
# ns3.x or not
#
if [ "`uname -v`" == "NexentaOS_134f" ]; then
    NEXENTASTOR_MAJ_VER=3
    ECHO=/usr/sun/bin/echo
    NOHUP=/usr/sun/bin/nohup
else
    NEXENTASTOR_MAJ_VER=4
    ECHO=/usr/bin/echo
    NOHUP=/usr/bin/nohup
fi
GREP=/usr/bin/grep
GZIP=/usr/bin/gzip
IFCONFIG=/usr/sbin/ifconfig
IOSTAT=/usr/bin/iostat
KSTAT=/usr/bin/kstat
LOCKSTAT=/usr/sbin/lockstat
MDB=/usr/bin/mdb
MKDIR=/usr/bin/mkdir
MODINFO=/usr/sbin/modinfo
MPSTAT=/usr/bin/mpstat
NFSSTAT=/usr/bin/nfsstat
PGREP=/usr/bin/pgrep
PRSTAT=/usr/bin/prstat
PSRINFO=/usr/sbin/psrinfo
SHARECTL=/usr/sbin/sharectl
SMBSTAT=/usr/sbin/smbstat
STAT=/usr/bin/stat
TAR=/usr/sbin/tar
TR=/usr/bin/tr
UPTIME=/usr/bin/uptime
VMSTAT=/usr/bin/vmstat
WGET=/usr/bin/wget
ZFS=/usr/sbin/zfs
ZPOOL=/usr/sbin/zpool

#
# The list of dtrace scripts we're interested in
#
if [ $NEXENTASTOR_MAJ_VER -eq 3 ]; then
    ARC_ADJUST=$LOG_SCRIPTS/arc_adjust.v2.d
    CIFS_TOP=$LOG_SCRIPTS/cifssvrtop
else
    ARC_ADJUST=$LOG_SCRIPTS/arc_adjust_ns4.v2.d
    CIFS_TOP=$LOG_SCRIPTS/cifssvrtop.v4
fi

ARC_EVICT=$LOG_SCRIPTS/arc_evict.d
ARC_META=$LOG_SCRIPTS/arc_meta.sh
ARCSTAT_PL=$LOG_SCRIPTS/arcstat.pl
DELAY_MINTIME=$LOG_SCRIPTS/delay_mintime.d
DNLC_LOOKUPS=$LOG_SCRIPTS/dnlc_lookups.d
FSSTAT_SH=$LOG_SCRIPTS/fsstat.sh
FLAME_STACKS=$LOG_SCRIPTS/flame_stacks.sh
HOTKERNEL=$LOG_SCRIPTS/hotkernel.priv
ISCSI_TOP=$LOG_SCRIPTS/iscsisvrtop
KMEM_REAP=$LOG_SCRIPTS/kmem_reap_100ms.d
LARGE_DELETE=$LOG_SCRIPTS/large_delete.d
LOCKSTAT_SPARTA=$LOG_SCRIPTS/lockstat_sparta.sh
METASLAB_ALLOC=$LOG_SCRIPTS/metaslab.sh
NFS_IO=$LOG_SCRIPTS/nfsio.d
NFS_RWTIME=$LOG_SCRIPTS/nfsrwtime.d
NFS_THREADS=$LOG_SCRIPTS/nfssrvutil.d
NFS_TOP=$LOG_SCRIPTS/nfssvrtop
OPENZFS_TXG_MON=$LOG_SCRIPTS/openzfs_txg.d
RWLATENCY=$LOG_SCRIPTS/rwlatency.d
SBD_ZVOL_UNMAP=$LOG_SCRIPTS/sbd_zvol_unmap.d
STMF_TASK_TIME=$LOG_SCRIPTS/stmf_task_time.d
TXG_MON=$LOG_SCRIPTS/txg_monitor.v3.d
ZIL_COMMIT_TIME=$LOG_SCRIPTS/zil_commit_time.d
ZIL_STAT=$LOG_SCRIPTS/zil_stat.d

#
# Additional scripts/utilities
#
SPARTA_SHIELD=$LOG_SCRIPTS/sparta_shield.sh


#
# Options to various commands
#
ARC_SAMPLES=3
# 
# If this is set too high you'll see 'State Changed' messages too frequently
#
ARCSTAT_SLEEP=2
#
# How frequently and for how long to sample ARC metadata usage (in seconds)
#
ARC_META_OPT="-t 10"

#
# Options for the cifssvrtop script
# -C = Don't clear the screen
#
CIFSSVRTOP_OPTS="-C"

#
# How long the flame stacks sample for
#
FLAME_STACKS_SAMPLE_TIME=60

#
# Options for the fsstat.sh script
# - Collect samples every 2 seconds for 30 samples (count)
#   REMEMBER: Adjust FSSTAT_SAMPLE_TIME if you adjust the options
#
FSSTAT_OPTS="-t 2 -c 30"
FSSTAT_SAMPLE_TIME=60

#
# If you want to sample iostat data for just 2 minutes use this line instead of the
# subsequent version, which samples every 2 seconds indefinitely
#
#IOSTAT_OPTS="-Td -xntz 2 60"
IOSTAT_INFO_OPTS="-En"
IOSTAT_OPTS="-Td -xntz 2"

#
# Options for the iscsisvrtop script
# -C = Don't clear the screen
#
ISCSISVRTOP_OPTS="-C"

HOTKERNEL_SAMPLES=3
HOTKERNEL_SAMPLE_TIME=30
LOCKSTAT_SAMPLES=5
LOCKSTAT_SLEEP=10
LOCKSTAT_CONTENTION_OPTS="-CcwP -n 100000 -x aggrate=10hz -D 20 -s 40 sleep $LOCKSTAT_SLEEP"
LOCKSTAT_PROFILING_OPTS="-kIW -n 100000000 -x aggrate=10hz -D 20 -s 40 sleep $LOCKSTAT_SLEEP"
MEMSTAT_SAMPLES=3

#
# Options for mpstat
# Sample indefinitely every 2 seconds
#
MPSTAT_OPTS="-T d 2"

#
# Options for nfsstat
# At the moment we're interested in getting just the server side stats
#
NFSSTAT_OPTS="-T d -srn 10"

#
# Options for the nfssvrtop script
# -C = Don't clear the screen
#
NFSSVRTOP_OPTS="-C"

# 
# Options for prstat
# Sample indefinitely every 2 seconds
#
PRSTAT_OPTS="-d d -mL 2"

#
# Options for smbstat
#
SMB_UTIL_OPTS="-cu 5"
SMB_OPS_OPTS="-urz 5"

# 
# If you want to sample vmstat for just 150 seconds, use the following line instead
# of the subsequent version, which samples every 5 seconds indefinitely
#
#VMSTAT_OPTS="-Td 5 30"
VMSTAT_OPTS="-Td 5"

#
# How frequently (seconds) and optionally how long we should be running zpool iostat -v <poolname> for
#
#ZPOOL_IOSTAT_FREQ="2 60"
ZPOOL_IOSTAT_FREQ="2"
ZPOOL_IOSTAT_OPTS="-vTd"

#
# Options for the zil_stat.d script
# -t = Enable timestamps on the output
#
ZIL_STAT_OPTS="-t"


#
# NexentaStor 4 and Illumos modifed ZFS write throttling and I/O scheduling as part
# of Issue #4045
# Test which version we're running on so we gather the right set of tunables
#
if [ $NEXENTASTOR_MAJ_VER -eq 3 ]; then
    ZFS_TUNABLE_LIST="zfs_txg_synctime_ms zfs_txg_timeout zfs_arc_shrink_shift arc_shrink_shift zfs_no_write_throttle metaslab_min_alloc_size"
else
    ZFS_TUNABLE_LIST="zfs_txg_timeout zfs_arc_shrink_shift arc_shrink_shift metaslab_min_alloc_size"
fi
KERNEL_TUNABLE_LIST="swapfs_minfree ncsize stmf_cur_ntasks stmf_nworkers_cur"

#
# Files to collect
#
CONFIG_FILE_LIST="/etc/system /kernel/drv/sd.conf /kernel/drv/scsi_vhci.conf /etc/power.conf /etc/issue"
OTHER_FILE_LIST="/etc/issue /var/adm/messages /var/log/nms.log"

################################################################################
#
# This is where the per instance/system tunables live and should be the only
# entries that need modifying
#

#
# The name of the zpool to monitor (required by txg_monitor*.d script and possibly others)
# Because we don't know the name of the zpool and there's no common naming convention, pick
# a default of syspool, although this will likely show uninteresting results
#
ZPOOL_NAME=syspool
if [ -r $LOG_CONFIG/.zpool_to_monitor ]; then
    . $LOG_CONFIG/.zpool_to_monitor
fi

#
# Which service do we wish to monitor?
#   NFS, CIFS, iSCSI or STMF
# 
# These are stored in a file $LOG_CONFIG/.services_to_monitor and take the form of
# TRACE_NFS={y|n}
# TRACE_CIFS={y|n}
# TRACE_ISCSI={y|n}
# TRACE_STMF={y|n}
#
# We read in this file here as the primary configuration file but store the y/n data
# in this separate file, so it's easier to update sparta.config and keep pre-saved
# answers alone without having to munge the config file.
#
# This should have been created by the installer but if it's missing then we may run
# into problems, so let's default them all to no (n) just in case:
#
TRACE_NFS=n
TRACE_CIFS=n
TRACE_ISCSI=n
TRACE_STMF=n

if [ -r $LOG_CONFIG ]; then
    . $LOG_CONFIG/.services_to_monitor
fi


### Cut and save here for a .commands_local file

################################################################################
#
# Group the various scripts/tools/commands into logical sections and define
# those that should be enabled (1) or disabled (0)
# If we have a .commands_local file in the etc directory, then we'll read that
# after setting up the values here.
# This is because the config file can be updated automatically, so if we ever add
# or modify any entries we want those to be present and correct and still keep
# the site local entries that will be read in afterwards to either enable or
# disable those customisations.
#
# This section can be trimmed and saved as the .commands_local file if required
#
 
#
### CPU tools
#
ENABLE_VMSTAT=1			# Basic system monitoring, cpu load
ENABLE_MPSTAT=1			# Enable CPU multi-processing information
ENABLE_PSRINFO=1		# Gather processor details, speed, manufacturer
ENABLE_PRSTAT=1			# Sample top X processes, sys/userland, latency
ENABLE_CSTATE=1			# Check for BIOS level CPU power saving
ENABLE_INTERRUPTS=1		# Gather configured interrupt handling data

CPU_ENABLE_LIST=($ENABLE_VMSTAT $ENABLE_MPSTAT $ENABLE_PSRINFO $ENABLE_PRSTAT $ENABLE_CSTATE $ENABLE_INTERRUPTS)
CPU_NAME_LIST=(vmstat.out mpstat.out psrinfo.out prstat.out cstate.out interrupts.out)
CPU_COMMAND_LIST=(launch_vmstat launch_mpstat gather_psrinfo launch_prstat gather_cstate gather_interrupts)


### Kernel tools
#
ENABLE_HOTKERNEL=1		# Sample the kernel's hot activity
ENABLE_TASKQ=1			# Sample the current kernel task queue details
ENABLE_LOCKSTAT=0		# Collect kernel locking information - disabled by default as it can add to system load 
ENABLE_KMEM_REAP=1		# Collect kernel memory reaping activity
ENABLE_KERNEL_MDB=1		# Collect some kernel tunables
ENABLE_FLAME_STACKS=1		# Collect kernel/user stacks for flamegraph processing

KERNEL_ENABLE_LIST=($ENABLE_HOTKERNEL $ENABLE_LOCKSTAT $ENABLE_TASKQ $ENABLE_KMEM_REAP $ENABLE_KERNEL_MDB $ENABLE_FLAME_STACKS)
KERNEL_NAME_LIST=(hotkernel.out NULL NULL kmem_reap.out NULL NULL)
KERNEL_COMMAND_LIST=( launch_hotkernel launch_lockstat gather_taskq launch_kmem_reap gather_kernel_mdb gather_flame_stacks)


### Network tools
#
ENABLE_IFCONFIG=1		# Collect basic networking information
ENABLE_DLADM=1			# Collect additional networking information

NETWORK_ENABLE_LIST=( $ENABLE_IFCONFIG $ENABLE_DLADM )
NETWORK_NAME_LIST=( ifconfig-a.out NULL )
NETWORK_COMMAND_LIST=( gather_ifconfig gather_dladm )


### ZFS tools
#
case $NEXENTASTOR_MAJ_VER in
    3 ) ENABLE_TXGMON=1		# Enable the ZFS transaction group monitor for one or more zpools
        ENABLE_OPENTXG=0	# Disable the OpenZFS transaction engine monitor
	ENABLE_DELAY_MINTIME=0	# Disable monitoring of the OpenZFS delay frequency
	ENABLE_ARC_META=0	# Disable sampling of ARC meta data usage
	;;
    4 ) ENABLE_TXGMON=0		# NexentaStor 4.x has the temp reserve code removed, therefore disable this for now
        ENABLE_OPENTXG=1	# Enable the OpenZFS transaction engine monitor, for NexentaStor 4.x
	ENABLE_DELAY_MINTIME=1	# Enable monitoring of the OpenZFS delay frequency
	ENABLE_ARC_META=1	# Enable sampling of ARC meta data usage
	;;
esac

ENABLE_METASLAB=1		# Sample metaslab allocation times for one or more pools
ENABLE_ARC_ADJUST=1		# Collect data on ARC shrink/grow activity
ENABLE_ARC_MDB=1		# Sample basic ::arc data from mdb
ENABLE_ARCSTAT=1		# Do we enable the arcstat.pl file to collect simple ARC data
ENABLE_ZIL_COMMIT=1		# Collect data on ZIL commit times/latency
ENABLE_ZIL_STAT=1		# Do we enable the zilstat.d script for basic ZIL performance numbers
ENABLE_ZFS_MDB=1		# Collect various ZFS tunables from the kernel
ENABLE_ZFS_PARAMS=1		# Collect the ZFS parameter tunables
ENABLE_ZPOOL_STATUS=1		# Whether we want the zpool status output
ENABLE_ZPOOL_LIST=1		# Whether we want the zpool list output
ENABLE_ZFS_GET=1		# Whether we want to do a zfs get all on the various datasets
ENABLE_LARGE_FILE_DELETE=1	# Do we run up the script to look for large file delete issues?
ENABLE_ZPOOL_IOSTAT=0		# Whether we sample 'zpool iostat -v' output for a pool.  Disabled by default
ENABLE_RWLATENCY=1		# Whether we wish to sample R/W latency figures.

ZFS_ENABLE_LIST=( $ENABLE_TXGMON $ENABLE_METASLAB $ENABLE_ARC_ADJUST $ENABLE_ARC_MDB $ENABLE_ARCSTAT $ENABLE_ZIL_COMMIT $ENABLE_ZIL_STAT $ENABLE_ZFS_MDB $ENABLE_ZFS_PARAMS $ENABLE_ZPOOL_STATUS $ENABLE_ZPOOL_LIST $ENABLE_ZFS_GET $ENABLE_LARGE_FILE_DELETE $ENABLE_ZPOOL_IOSTAT $ENABLE_OPENTXG $ENABLE_ARC_META $ENABLE_RWLATENCY $ENABLE_DELAY_MINTIME)
ZFS_NAME_LIST=( NULL NULL arc_adjust.out arc.out arcstat.out zil_commit.out zilstat.out NULL NULL zpool_status.out zpool_list.out NULL large_delete.out NULL NULL NULL NULL NULL)
ZFS_COMMAND_LIST=( launch_txg_monitor launch_metaslab launch_arc_adjust gather_arc_mdb launch_arcstat launch_zil_commit launch_zil_stat gather_zfs_mdb gather_zfs_params gather_zpool_status gather_zpool_list gather_zfs_get launch_large_file_delete gather_zpool_iostat launch_openzfs_txg_monitor launch_arc_meta launch_rwlatency launch_delay_mintime)


### OS tools
#
ENABLE_DNLC=1			# Whether to enable DNLC statistic monitoring
ENABLE_MEMSTAT=1		# Whether we gather basic ::memstat data
ENABLE_UPTIME=1			# Whether we gather simple uptime data

OS_ENABLE_LIST=( $ENABLE_DNLC $ENABLE_MEMSTAT $ENABLE_UPTIME )
OS_NAME_LIST=(dnlc_lookups.out memstat.out uptime.out)
OS_COMMAND_LIST=(launch_dnlc gather_memstat gather_uptime)


### Disk tools
#
ENABLE_IOSTAT=1                 # Whether we gather basic disk information (iostat -En)
ENABLE_IOSTAT_LOGGING=1         # Whether we enable basic iostat disk monitoring

DISK_ENABLE_LIST=( $ENABLE_IOSTAT $ENABLE_IOSTAT_LOGGING )
DISK_NAME_LIST=( iostat-En.out iostat.out )
DISK_COMMAND_LIST=( gather_iostat launch_iostat )


### Filesystem tools
#
ENABLE_FSSTAT=1			# Whether we gather some filesystem statistics

FILESYS_ENABLE_LIST=( $ENABLE_FSSTAT )
FILESYS_NAME_LIST=( fsstat.out )
FILESYS_COMMAND_LIST=( gather_fsstat )


### NFS tools
#
ENABLE_NFS_IO=1			# Whether we run the nfsio.d script
ENABLE_NFS_THREADS=1		# Whether we run the nfssrvutil.d script for thread utilisation
ENABLE_NFS_TOP=1		# Whether we run the nfssvrtop.d script to look for highest NFS consumers
ENABLE_NFS_RWTIME=1		# Whether we run the nfsrwtime.d script to look at r/w times
ENABLE_NFS_STAT=1		# Whether we gather nfsstat -s output
ENABLE_NFS_SHARECTL=1		# Whether we gather sharectl get nfs output

NFS_ENABLE_LIST=($ENABLE_NFS_IO $ENABLE_NFS_THREADS $ENABLE_NFS_TOP $ENABLE_NFS_RWTIME $ENABLE_NFS_STAT $ENABLE_NFS_SHARECTL)
NFS_NAME_LIST=(nfs_io.out nfs_threads.out nfssvrtop.out nfs_rwtime.out nfsstat-s.out sharectl_get_nfs.out)
NFS_COMMAND_LIST=(launch_nfs_io launch_nfs_thread_util launch_nfstop launch_nfs_rwtime gather_nfs_stat_server gather_nfs_share_output)


### CIFS tools
#
ENABLE_CIFS_TOP=1		# Whether we run the cifssvrtop.d script to look for highest CIFS consumers
ENABLE_CIFS_SHARECTL=1		# Whether we gather the sharectl get cifs output
#
# Disable smbstat data collection due to:
# Bug #NEX-3273
# Synopsis:smbstat delays its output when redirected to a file
#
ENABLE_CIFS_UTIL=0		# Whether we gather smbstat utilisation data
ENABLE_CIFS_OPS=0		# Whether we gather smbstat iops data

CIFS_ENABLE_LIST=($ENABLE_CIFS_TOP $ENABLE_CIFS_SHARECTL $ENABLE_CIFS_UTIL $ENABLE_CIFS_OPS)
CIFS_NAME_LIST=(cifssvrtop.out sharectl_get_smb.out cifsutil.out cifsops.out)
CIFS_COMMAND_LIST=(launch_cifs_top gather_cifs_share_output launch_cifs_util launch_cifs_ops)


### ISCSI tools
#
ENABLE_ISCSI_TOP=1		# Whether we run the iscsisvrtop.d script to look for highest iSCSI consumers

ISCSI_ENABLE_LIST=($ENABLE_ISCSI_TOP)
ISCSI_NAME_LIST=(iscsisvrtop.out)
ISCSI_COMMAND_LIST=(launch_iscsitop)

### COMSTAR/STMF/SBD tools
#
if [ $NEXENTASTOR_MAJ_VER -eq 3 ]; then
    ENABLE_SBD_ZVOL_UNMAP=1	# Whether we run the sbd_zvol_unmap.d script looking for signs of unmap/trim activity
else
    ENABLE_SBD_ZVOL_UNMAP=0	# Doesn't work under NexentaStor 4.x
fi

ENABLE_STMF_TASK_TIME=1		# Whether we run the stmf_task_time.d script to look for delays in the COMSTAR stack
ENABLE_STMF_WORKERS=1		# Whether we gather information on backlog of stmf worker tasks

COMSTAR_ENABLE_LIST=($ENABLE_SBD_ZVOL_UNMAP $ENABLE_STMF_TASK_TIME $ENABLE_STMF_WORKERS)
COMSTAR_NAME_LIST=(sbd_zvol_unmap.out stmf_task_time.out stmf_worker_backlog.out)
COMSTAR_COMMAND_LIST=(launch_sbd_zvol_unmap launch_stmf_task_time gather_stmf_workers)

### Cut and save here for a .commands_local file


#
# If the site specific .commands_local file exists, read it in here to override
# any default values we have already set.
#
if [ -r $LOG_CONFIG/.commands_local ]; then
    printf "Found a site specific config file, overriding the defaults ... "
    . $LOG_CONFIG/.commands_local
    if [ $? -eq 0 ]; then
        echo "done"
    else
        echo "oops, something went wrong reading the .commands_local file"
    fi
fi

################################################################################
#
# Stupid sanity check to make sure all the configuration has been read from this
# configuration file.
#
SPARTA_CONFIG_READ_OK=1
